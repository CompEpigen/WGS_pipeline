import pandas as pd

chromosomes = [str(x) for x in range(1,23)] + ["X","Y"]
chromosomes_noY = [str(x) for x in range(1,23)] + ["X"]

if isinstance(config["samples"], str):
	samples = []
	with open(config["samples"],"r") as infile:
		for line in infile:
			samples.append(line.rstrip("\n"))
else:
	samples = config["samples"]


sample_sex={}
for sample in samples:
	sample_sex[sample] = "XX"
if "metadata_file" in config.keys():
	with open(config["metadata_file"],"r") as infile:
		tmp = infile.readline()
		for line in infile:
			linesplit = line.rstrip("\n").split("\t")
			if linesplit[1]=="F":
				sample_sex[linesplit[0]] = "XX"
			else:
				sample_sex[linesplit[0]] = "XY"

if not "normal_suffix" in config:
	config["normal_suffix"] = "normal"
if not "tumor_suffix" in config:
	config["tumor_suffix"] = "tumor"

# Normal sample name: for mutect2, gives the sample name in the BAM file of the normal sample

if not "normal_samplename" in config:
	config["normal_samplename"]={}
	for x in samples:
		config["normal_samplename"][x] = "sample_normal_"+x
else:
	df_normalsamplenames = pd.read_csv(config["normal_samplename"],sep=",")
	config["normal_samplename"]={}
	for x in df_normalsamplenames.index:
		config["normal_samplename"][df_normalsamplenames.loc[x,"patient"]] = df_normalsamplenames.loc[x,"normal_samplename"]



if not "template_FREEC" in config:
	config["template_FREEC"] = "data/config_template_FREEC_control.txt"

ruleorder: run_FREEC_control > run_FREEC > run_manta_control > run_manta > postprocess_manta_control > postprocess_manta >  run_mutect2_control >  postprocess_mutect2 > run_mutect2

rule all:
	input:
		expand(config["output_dir"]+"/out/plots/chrplots_png/{sample}/{sample}_chr{chr}.png",sample=samples,chr=chromosomes),
		expand(config["output_dir"]+"/out/SNV/mutect2_full/{sample}/{sample}.tsv",sample=config["samples"])


include: "rules/FREEC.smk"
include: "rules/manta.smk"
include: "rules/SNV.smk"
include: "rules/plots.smk"


# Filter the BAM files by removing reads which align to several locations
rule filter_BAM:
	params:
		threads="8",
		runtime="20:00",
		memory="2G"
	input:
		BAM = config["output_dir"]+"/BAM_unfiltered/{sample}.bam"
	output:
		BAM = config["output_dir"]+"/BAM/{sample}.bam",
		BAM_i = config["output_dir"]+"/BAM/{sample}.bam.bai"
	shell:
		"sambamba view -t 8 -F '[XA]==null and mapping_quality >35' {bam_path} -f bam -o {output.BAM}"


"""
# Create links to the BAM files, so that the other functions do not need to take the directory structure of the original BAM files into account.
rule create_link_BAM:
	params:
		threads="1",
		runtime="20",
		memory="1000"
	output:
		BAM = config["output_dir"]+"/BAM/{sample}.bam",
		BAM_i = config["output_dir"]+"/BAM/{sample}.bam.bai"
	run:
		bam_path = config["BAM_template"].replace("_SAMPLE_",wildcards.sample)
		shell("ln -s {bam_path} {output.BAM}")
		shell("ln -s {bam_path}.bai {output.BAM_i}")
"""

"""
# Filter the BAM files by removing reads which align to several locations
rule filter_BAM:
	params:
		threads="1",
		runtime="20",
		memory="1000"
	output:
		BAM = config["output_dir"]+"/BAM/{sample}.bam",
		BAM_i = config["output_dir"]+"/BAM/{sample}.bam.bai"
	run:
		bam_path = config["BAM_template"].replace("_SAMPLE_",wildcards.sample)
		shell("sambamba view -F '[XA]==null and mapping_quality >35' {bam_path} -f bam -o {output.BAM}")
		shell("samtools index {output.BAM}")

"""